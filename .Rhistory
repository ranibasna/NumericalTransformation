#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
UFT_func <- function(Data, Seed){
# create a default seed
set.seed(Seed)
# checking the data format
if (!is.data.frame(Data)){
stop("The Data is not in dataframe format")
}
# check for missing data
assertthat::are_equal(sum(is.na(Data)), 0)
# Spliting the data according to their classes
data_splits <- Data_Classes_Split(Data)
drops_numerical <-data_splits$numeric
# droping numerical classes
data_cate <- Data[ , !(names(Data) %in% drops_numerical)]
data_cate <- Prepare_data(data_cate)
# check that there are other coloumns than numerical
assertthat::not_empty(data_cate)
# count numbre of uniqe values in each column
coutn_unique_data <- data_cate %>% dplyr::summarise_all(n_distinct)
# creat a function to compare the number of uniqe element within each column and use it within map func
com_fun <- function(.x){
return(.x == 1)
}
# using map from purr library to creat a list of true/false values where True refere to column in the data that has a one value
count_number_logic <- purrr::map(coutn_unique_data,com_fun)
# check the follwoing condition
if (TRUE %in% count_number_logic){
#print(names(count_number_logic[match(TRUE, count_number_logic)]))
#stop(paste0("The follwoing column in the data has only one value and this need to be removed from the clustering ", names(count_number_logic[match(TRUE, count_number_logic)])))
stop(paste0(" The follwoing column in the data has only one value and this need to be removed from the clustering: ", names(count_number_logic[which(count_number_logic == TRUE)])))
#stop("The follwoing column in the data has only one value and this need to be removed from the clustering")
}
m <- length(data_cate)
d <- dim(data_cate)[1]
#
for (j in 1:m) {
n <- length(unique(data_cate[,j]))
S <- as.vector(as.matrix(dplyr::count(data_cate, data_cate[,j], sort = TRUE)[,1])) # the unique values of variable (we did this some that the order match with count and probabilities)
C <- as.vector(as.matrix(dplyr::count(data_cate, data_cate[,j], sort = TRUE)[,2])) # the count (number of occurance) of the values in the variable
P <- C/(d*1) # Probabilities
print(P)
print(class(P))
print(sum(P))
for (i in 1:n){
mu <- 0
L1 <- 0
L2 <- 1- sum(P^3)
L3 <- 0
for (h in 1:n) {
H <- P[h]*P[i]*(h-i)^2
L3 <- H + L3
}
for (k in 1:i){
mu1 <- sum((n-k) * P[k])
L1 <- L1 + mu1
}
mu <- ((n -i) - L1) * sqrt(L2/L3)
for (l in 1:d){
if (data_cate[l,j] == S[i]){
data_cate[l,j] <- rnorm(1,mu, P[i])
}
}
}
}
return(data_cate)
}
uft_x <- UFT_func(Data = X,Seed = 11)
uft_x
#' @param Seed is for reproducibility reasons.
#'
#' @return The output from the UFT_Func is a dataframe of numerical columns replacing the original categorical features.
#' @export
#' @import dplyr assertthat
#' @importFrom purrr map
#' @importFrom stats rnorm
#' @examples
#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
UFT_func <- function(Data, Seed){
# create a default seed
set.seed(Seed)
# checking the data format
if (!is.data.frame(Data)){
stop("The Data is not in dataframe format")
}
# check for missing data
assertthat::are_equal(sum(is.na(Data)), 0)
# Spliting the data according to their classes
data_splits <- Data_Classes_Split(Data)
drops_numerical <-data_splits$numeric
# droping numerical classes
data_cate <- Data[ , !(names(Data) %in% drops_numerical)]
data_cate <- Prepare_data(data_cate)
# check that there are other coloumns than numerical
assertthat::not_empty(data_cate)
# count numbre of uniqe values in each column
coutn_unique_data <- data_cate %>% dplyr::summarise_all(n_distinct)
# creat a function to compare the number of uniqe element within each column and use it within map func
com_fun <- function(.x){
return(.x == 1)
}
# using map from purr library to creat a list of true/false values where True refere to column in the data that has a one value
count_number_logic <- purrr::map(coutn_unique_data,com_fun)
# check the follwoing condition
if (TRUE %in% count_number_logic){
#print(names(count_number_logic[match(TRUE, count_number_logic)]))
#stop(paste0("The follwoing column in the data has only one value and this need to be removed from the clustering ", names(count_number_logic[match(TRUE, count_number_logic)])))
stop(paste0(" The follwoing column in the data has only one value and this need to be removed from the clustering: ", names(count_number_logic[which(count_number_logic == TRUE)])))
#stop("The follwoing column in the data has only one value and this need to be removed from the clustering")
}
m <- length(data_cate)
d <- dim(data_cate)[1]
#
for (j in 1:m) {
n <- length(unique(data_cate[,j]))
S <- as.vector(as.matrix(dplyr::count(data_cate, data_cate[,j], sort = TRUE)[,1])) # the unique values of variable (we did this some that the order match with count and probabilities)
C <- as.vector(as.matrix(dplyr::count(data_cate, data_cate[,j], sort = TRUE)[,2])) # the count (number of occurance) of the values in the variable
P <- C/(d*1) # Probabilities
print(P)
print(class(P))
print(sum(P))
assertthat::are_equal(sum(P), 1)
for (i in 1:n){
mu <- 0
L1 <- 0
L2 <- 1- sum(P^3)
L3 <- 0
for (h in 1:n) {
H <- P[h]*P[i]*(h-i)^2
L3 <- H + L3
}
for (k in 1:i){
mu1 <- sum((n-k) * P[k])
L1 <- L1 + mu1
}
mu <- ((n -i) - L1) * sqrt(L2/L3)
for (l in 1:d){
if (data_cate[l,j] == S[i]){
data_cate[l,j] <- rnorm(1,mu, P[i])
}
}
}
}
return(data_cate)
}
uft_x <- UFT_func(Data = X,Seed = 11)
uft_x
mean(uft_x$Sex)
sd(uft_x$Sex)
testthat::test_that('Testing that UFT_func is reprudcible',{
X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
uft_x <- UFT_func(Data = X,Seed = 11)
#expect_( uft_x$Sex, c(-1.6243020, -1.5473521, 0.5705099, 0.8793226))
expect_equal(mean(uft_x$Sex), -04304554)
})
testthat::test_that('Testing that UFT_func is reprudcible',{
X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
uft_x <- UFT_func(Data = X,Seed = 11)
#expect_( uft_x$Sex, c(-1.6243020, -1.5473521, 0.5705099, 0.8793226))
expect_equal(mean(uft_x$Sex), -043)
})
mean(uft_x$Sex)
floor(0.44)
round(0.44)
dim(uft_x)
testthat::test_that('Testing that UFT_func is reprudcible',{
X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
uft_x <- UFT_func(Data = X,Seed = 11)
#expect_( uft_x$Sex, c(-1.6243020, -1.5473521, 0.5705099, 0.8793226))
expect_equal(dim(uft_x) = c(4,3))
})
testthat::test_that('Testing that UFT_func is reprudcible',{
X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
uft_x <- UFT_func(Data = X,Seed = 11)
#expect_( uft_x$Sex, c(-1.6243020, -1.5473521, 0.5705099, 0.8793226))
expect_equal(dim(uft_x), c(4,3))
})
#' @param Seed is for reproducibility reasons.
#'
#' @return The output from the UFT_Func is a dataframe of numerical columns replacing the original categorical features.
#' @export
#' @import dplyr assertthat
#' @importFrom purrr map
#' @importFrom stats rnorm
#' @examples
#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
UFT_func <- function(Data, Seed){
# create a default seed
set.seed(Seed)
# checking the data format
if (!is.data.frame(Data)){
stop("The Data is not in dataframe format")
}
# check for missing data
assertthat::are_equal(sum(is.na(Data)), 0)
# Spliting the data according to their classes
data_splits <- Data_Classes_Split(Data)
drops_numerical <-data_splits$numeric
# droping numerical classes
data_cate <- Data[ , !(names(Data) %in% drops_numerical)]
data_cate <- Prepare_data(data_cate)
# check that there are other coloumns than numerical
assertthat::not_empty(data_cate)
# count numbre of uniqe values in each column
coutn_unique_data <- data_cate %>% dplyr::summarise_all(n_distinct)
# creat a function to compare the number of uniqe element within each column and use it within map func
com_fun <- function(.x){
return(.x == 1)
}
# using map from purr library to creat a list of true/false values where True refere to column in the data that has a one value
count_number_logic <- purrr::map(coutn_unique_data,com_fun)
# check the follwoing condition
if (TRUE %in% count_number_logic){
#print(names(count_number_logic[match(TRUE, count_number_logic)]))
#stop(paste0("The follwoing column in the data has only one value and this need to be removed from the clustering ", names(count_number_logic[match(TRUE, count_number_logic)])))
stop(paste0(" The follwoing column in the data has only one value and this need to be removed from the clustering: ", names(count_number_logic[which(count_number_logic == TRUE)])))
#stop("The follwoing column in the data has only one value and this need to be removed from the clustering")
}
m <- length(data_cate)
d <- dim(data_cate)[1]
#
for (j in 1:m) {
n <- length(unique(data_cate[,j]))
S <- as.vector(as.matrix(dplyr::count(data_cate, data_cate[,j], sort = TRUE)[,1])) # the unique values of variable (we did this some that the order match with count and probabilities)
C <- as.vector(as.matrix(dplyr::count(data_cate, data_cate[,j], sort = TRUE)[,2])) # the count (number of occurance) of the values in the variable
P <- C/(d*1) # Probabilities
assertthat::are_equal(sum(P), 1)
for (i in 1:n){
mu <- 0
L1 <- 0
L2 <- 1- sum(P^3)
L3 <- 0
for (h in 1:n) {
H <- P[h]*P[i]*(h-i)^2
L3 <- H + L3
}
for (k in 1:i){
mu1 <- sum((n-k) * P[k])
L1 <- L1 + mu1
}
mu <- ((n -i) - L1) * sqrt(L2/L3)
for (l in 1:d){
if (data_cate[l,j] == S[i]){
data_cate[l,j] <- rnorm(1,mu, P[i])
}
}
}
}
return(data_cate)
}
testthat::test_that('Testing that UFT_func is reprudcible',{
X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
uft_x <- UFT_func(Data = X,Seed = 11)
#expect_( uft_x$Sex, c(-1.6243020, -1.5473521, 0.5705099, 0.8793226))
expect_equal(dim(uft_x), c(4,3))
})
testthat::test_that('Testing that UFT_func is',{
X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ), "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
uft_x <- UFT_func(Data = X,Seed = 11)
expect_equal(dim(uft_x), c(4,3))
expect_equal(colnames(uft_x), c('Sex', 'Name', 'Smoking'))
})
library(NumericTransformation)
library(NumericTransformation)
source('~/.active-rstudio-document')
dim(x)
head(x)
class(x)
library(ggplot2)
library(dplyr)
sort(apply(x, 2, function(x){sum(is.na(x))}), decreasing = TRUE)
x_converted_data <- UFT_func(x, Seed = 22)
head(x_converted_data)
head(x)
str(x)
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(x_converted_data_all)
str(x)
class(x_converted_data)
class(x)
#' @param scale_numeric logical. Scale the data if True inserted. Default is False.
#'
#' @return a data frame the contain the tranformed data
#' @export
#'
#' @examples
#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ),
#' "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
#' bined_data <- bined_converted_func(converted_data = uft_x, original_data = X, scale_numeric = TRUE)
bined_converted_func <-  function(converted_data, original_data, scale_numeric = FALSE){
if (scale_numeric == TRUE){
num_data <- original_data %>% select_if(is.double) %>% scale() %>% as.data.frame()
}
else{
num_data <- original_data %>% select_if(is.double)
}
browser()
converted_df <- cbind(converted_data, num_data)
assertthat::are_equal(dim(converted_data)[1], dim(original_data)[1])
assertthat::are_equal(dim(converted_data)[2], dim(original_data)[2])
}
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
ls
dim(num_data)
str(num_data)
head(num_data)
dim(converted_data)
dim(original_data)
dim(original_data[2])
dim(original_data)[2]
dim(converted_data)[2]
#' @param scale_numeric logical. Scale the data if True inserted. Default is False.
#'
#' @return a data frame the contain the tranformed data
#' @export
#'
#' @examples
#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ),
#' "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
#' bined_data <- bined_converted_func(converted_data = uft_x, original_data = X, scale_numeric = TRUE)
bined_converted_func <-  function(converted_data, original_data, scale_numeric = FALSE){
if (scale_numeric == TRUE){
num_data <- original_data %>% select_if(is.double) %>% scale() %>% as.data.frame()
}
else{
num_data <- original_data %>% select_if(is.double)
}
browser()
converted_df <- cbind(converted_data, num_data)
assertthat::are_equal(dim(converted_data)[1], dim(original_data)[1])
assertthat::are_equal(dim(converted_data)[2], dim(original_data)[2])
browser()
}
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(num_data)
ls
dim(converted_data)[2]
dim(original_data)[2]
assertthat::are_equal(5,4)
#' @param scale_numeric logical. Scale the data if True inserted. Default is False.
#'
#' @return a data frame the contain the tranformed data
#' @export
#'
#' @examples
#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ),
#' "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
#' bined_data <- bined_converted_func(converted_data = uft_x, original_data = X, scale_numeric = TRUE)
bined_converted_func <-  function(converted_data, original_data, scale_numeric = FALSE){
if (scale_numeric == TRUE){
num_data <- original_data %>% select_if(is.double) %>% scale() %>% as.data.frame()
}
else{
num_data <- original_data %>% select_if(is.double)
}
converted_df <- cbind(converted_data, num_data)
assertthat::are_equal(dim(converted_df)[1], dim(original_data)[1])
assertthat::are_equal(dim(converted_df)[2], dim(original_data)[2])
#browser()
return(converted_df)
}
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
class(x_converted_data_all)
#' @param scale_numeric logical. Scale the data if True inserted. Default is False.
#'
#' @return a data frame the contain the tranformed data
#' @export
#'
#' @examples
#' X <- data.frame("ID" = as.numeric(c(1,2,3,4)), "Age" = c(21,15,44,14), "Sex" = c("Male", "Male", "Female", "Female" ),
#' "Name" = c("John","Samer", "Sara", "Carolina"), Smoking = c("Yes","No", "No","Yes"))
#' uft_x <- UFT_func(Data = X,Seed = 11)
#' bined_data <- bined_converted_func(converted_data = uft_x, original_data = X, scale_numeric = TRUE)
bined_converted_func <-  function(converted_data, original_data, scale_numeric = FALSE){
if (scale_numeric == TRUE){
num_data <- original_data %>% select_if(is.double) %>% scale() %>% as.data.frame()
}
else{
num_data <- original_data %>% select_if(is.double)
}
converted_df <- cbind(converted_data, num_data)
assertthat::are_equal(dim(converted_df)[1], dim(original_data)[1])
assertthat::are_equal(dim(converted_df)[2], dim(original_data)[2])
#browser()
return(converted_df)
}
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
class(x_converted_data_all)
head(x_converted_data_all)
head(x)
# plotiing
x_converted_data <- x_converted_data_all %>% mutate(id = row_number())
# adding old non-numerical features
x_converted_data_all$x1_old <- x$x1
ggplot(x_converted_data_all, aes(x=id, y=sex, color=x1_old)) + geom_point()
ggplot(x_converted_data_all, aes(x=id, y=x1, color=x1_old)) + geom_point()
head(x_converted_data_all)
# plotiing
x_converted_data_all <- x_converted_data_all %>% mutate(id = row_number())
head(x_converted_data_all)
ggplot(x_converted_data_all, aes(x=id, y=x1, color=x1_old)) + geom_point()
prb <- 0.5
x1 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x1 <- c(x1, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x2 <- c(x2, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x2 <- as.factor(x2)
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x <- data.frame(x1,x2,x3,x4)
dim(x)
sort(apply(x, 2, function(x){sum(is.na(x))}), decreasing = TRUE)
x_converted_data <- UFT_func(x, Seed = 22)
head(x_converted_data)
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(x_converted_data_all)
# plotiing
x_converted_data_all <- x_converted_data_all %>% mutate(id = row_number())
# adding old non-numerical features
x_converted_data_all$x1_old <- x$x1
ggplot(x_converted_data_all, aes(x=id, y=x1, color=x1_old)) + geom_point()
ggplot(x_converted_data_all, aes(x=x1), color=x1_old) + geom_histogram(bins = 30, color = "black", fill = "gray")
prb <- 0.9
muk <- 1.5
clusid <- rep(1:4, each = n)
x1 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x1 <- c(x1, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x2 <- c(x2, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x2 <- as.factor(x2)
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x <- data.frame(x1,x2,x3,x4)
dim(x)
sort(apply(x, 2, function(x){sum(is.na(x))}), decreasing = TRUE)
x_converted_data <- UFT_func(x, Seed = 22)
head(x_converted_data)
# bined all the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(x_converted_data_all)
# plotiing
x_converted_data_all <- x_converted_data_all %>% mutate(id = row_number())
# adding old non-numerical features
x_converted_data_all$x1_old <- x$x1
ggplot(x_converted_data_all, aes(x=id, y=x1, color=x1_old)) + geom_point()
ggplot(x_converted_data_all, aes(x=x1), color=x1_old) + geom_histogram(bins = 30, color = "black", fill = "gray")
# plotiing
x_converted_data_all <- x_converted_data_all %>% dplyr::mutate(id = row_number())
head(x_converted_data_all)
# Generate toy data with categorical and numerical columns
n   <- 100
prb <- 0.5
muk <- 1.5
clusid <- rep(1:4, each = n)
x1 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x1 <- c(x1, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x2 <- c(x2, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x2 <- as.factor(x2)
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x <- data.frame(x1,x2,x3,x4)
summary(x)
# converting the numerical data using UFT_func
x_converted_data <- UFT_func(x, Seed = 22)
#head(x_converted_data)
# bined with the rest of the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(x_converted_data_all)
class(x_converted_data_all)
class(x_converted_data)
# plotiing
x_converted_data_all <- x_converted_data_all %>% dplyr::mutate(id = row_number())
head(x_converted_data_all)
x_converted_data_all <- seq.int(nrow(x_converted_data))
# converting the numerical data using UFT_func
x_converted_data <- UFT_func(x, Seed = 22)
#head(x_converted_data)
# bined with the rest of the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(x_converted_data_all)
x_converted_data_all$id <- seq.int(nrow(x_converted_data))
head(x_converted_data_all)
# plotiing
x_converted_data_all <- x_converted_data_all %>% dplyr::mutate(id_1 = row_number())
head(x_converted_data_all)
# plotiing
#x_converted_data_all <- x_converted_data_all %>% dplyr::mutate(id_1 = row_number())
x_converted_data_all$id <- seq.int(nrow(x_converted_data_all))
# converting the numerical data using UFT_func
x_converted_data <- UFT_func(x, Seed = 22)
#head(x_converted_data)
# bined with the rest of the data
x_converted_data_all <- bined_converted_func(converted_data = x_converted_data, original_data = x)
head(x_converted_data_all)
class(seq.int(nrow(x_converted_data_all)) )
class(x_converted_data_all)
